AWSTemplateFormatVersion: 2010-09-09
Description: >
  Template to deploy a lambda which is triggered by an S3 event.

Resources:
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/ScopePermissions
      Policies:
      - PolicyName: LambdaLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource: '*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        ZipFile: |
            import logging, boto3, os
            LOGGER = logging.getLogger()
            LOGGER.setLevel(logging.INFO)

            # takes NotificationConfiguration event var
            # https://stackoverflow.com/questions/46928105/reading-files-triggered-by-s3-event
            # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#bucketnotification
            def handler(event, context):
                bucket_name = event['Records'][0]['s3']['bucket']['name']
                file_key = event['Records'][0]['s3']['object']['key']
                LOGGER.info(f'New object in bucket: {bucket_name =}, {file_key =}')
              
            # Download s3 object from event to /tmp directory
              # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.download_file
              # update perms with s3:GetObject and s3:PutObject
              # (needed to get, then put file to tmp, aka downloading from bucket to /tmp)
                s3 = boto3.resource('s3')
                s3.meta.client.download_file(bucket_name, file_key, f'/tmp/{file_key}')

            # Assert file downloaded and log results
              # https://stackoverflow.com/questions/43768290/python-aws-lambda-function-how-to-view-tmp-storage/43768406
                assert_dl = os.path.isfile('/tmp/' + file_key)
                
                return LOGGER.info(f'Assert {file_key} downloaded to /tmp/ :  {assert_dl}')

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: sqr00t-template3
      # add comments below on first deploy, uncomment then update-stack
      # sends event on triggered event type s3:ObjectCreated, invoked for LambdaFunction.arn attributes.
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt LambdaFunction.Arn

  S3BucketPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt S3Bucket.Arn