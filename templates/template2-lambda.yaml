AWSTemplateFormatVersion: 2010-09-09
Description: >
  Template to deploy a simple lambda function, which logs the lambda event.

Resources:
  
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/ScopePermissions
      Policies:
      - PolicyName: LambdaLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
      - PolicyName: ListBucketsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3:ListBucket
            Resource: '*'


  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        ZipFile: |
            import boto3
            import logging
            LOGGER = logging.getLogger()
            LOGGER.setLevel(logging.INFO)

            s3_client = boto3.client("s3")

            def handler(event, context):
                request = s3_client.list_objects(
                    Bucket = 'sqr00t-cf')

                log_response = [x['Key'] for x in request['Contents']]

                return LOGGER.info(f'Objects in Bucket: {log_response}')